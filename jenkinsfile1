node {	
 stage('SCM Checkout'){
         git 'https://github.com/adghb/java-demo'
   }
   stage('package') {
    def XvfbHome = tool name: 'xvfb', type: 'Xvfb'{
     sh "${xvfbHome}/usr/bin Xvfb :99 & export DISPLAY=:99"
     }
     }
     stage('package') {
  // execute selenium tests
       // Get maven home path
       def mvnHome = tool name: 'maven-3', type: 'maven'
       sh "${mvnHome}/bin/mvn clean package"
   }
   stage('SonarQube Analysis') {
        def mvnHome =  tool name: 'maven-3', type: 'maven'
        withSonarQubeEnv('sonarqube') { 
          sh "${mvnHome}/bin/mvn sonar:sonar"
        }
    }
    stage("Quality Gate"){
       timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
         def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
	 if (qg.status != 'OK') {
	   error "Pipeline aborted due to quality gate failure: ${qg.status}"
         }   
       }
    }
    stage('compile'){
       // Get maven home path
       def mvnHome = tool name: 'maven-3', type: 'maven'
       sh "${mvnHome}/bin/mvn compile"
    }

    stage('Unit Tests') {
       steps {
           sh 'mvn surefire:test'
             }
    }


    stage('Integration Tests') {
       steps {
            sh 'mvn failsafe:integration-test'
             }
    }
    stage('package'){
      // Get maven home path
       def mvnHome = tool name: 'maven-3', type: 'maven'
       sh "${mvnHome}/bin/mvn clean package"
    }

    stage('mvn deploy'){
      // Get maven home path
       def mvnHome = tool name: 'maven-3', type: 'maven'
       sh "${mvnHome}/bin/mvn deploy"
    }

 //   stage('functionaltest'){
       // Get maven home path
 //      def mvnHome = tool name: 'maven-3', type: 'maven'
  //     sh "${mvnHome}/bin/mvn verify"
  //  }
  //  stage("cucumber report"){
  //    cucumber fileIncludePattern: '**/*.json', sortingMethod: 'ALPHABETICAL'
  //  }

   stage('Deploy to Tomcat'){
      
     sshagent(['tomcat']) {
         sh 'scp -o StrictHostKeyChecking=no target/*.war ubuntu@172.31.1.73:/opt/tomcat/webapps/'
     }
  }

  stage ('Starting Zap') {
    build job: 'zap'

  }
  
  stage('Run JMeter Test') {
  sh '/home/ubuntu/apache-jmeter-5.0/bin/jmeter.sh -n -t jmeter_example.jmx -l Jmeter_test_Report.jtl'
  
  }
}
